import java.util.Scanner;

public class AESDecoder {
    private int[][] sBox = {{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
            {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
            {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
            {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
            {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
            {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
            {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
            {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
            {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
            {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
            {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
            {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
            {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
            {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
            {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
            {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};

    private int[][] inverseSBox = {{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
            {0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
            {0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
            {0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
            {0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
            {0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
            {0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
            {0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
            {0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
            {0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
            {0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
            {0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
            {0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
            {0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
            {0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
            {0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}};
    private int[] addingRoundConst = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

    private String cypher;
    private String key;

    AESDecoder(String cypher, String key) {
        this.cypher = cypher;
        this.key = key;
    }

    private int[][] reverseSubBytes(int[][] grid) {
        int[][] matrix = new int[4][4];
        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                matrix[i][j] = reverseLookup(grid[i][j]);
        return matrix;
    }

    private int reverseLookup(int num) {
        return inverseSBox[num / 16][num % 16];
    }

    private int lookup(int num) {
        return sBox[num / 16][num % 16];
    }

    private int[][] expandKey(int[][] key) {
        int len = 44;
        int[][] result = new int[len][4];
        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                result[i][j] = key[j][i];


        for (int i = 4; i < len; i++) {
            for (int j = 0; j < 4; j++) {
                if (i % 4 != 0) {
                    result[i][j] = result[i - 1][j] ^ result[i - 4][j];
                } else {
                    int x = lookup(result[i - 1][(j + 1) % 4]);
                    if (j == 0)
                        x ^= addingRoundConst[i / 4 - 1];
                    result[i][j] = x ^ result[i - 4][j];
                }

            }
        }

        return result;
    }

    private int[][] extractRoundKey(int[][] expandedKey, int round) {
        int[][] matrix = new int[4][4];
        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                matrix[i][j] = expandedKey[j + 4 * round][i];

        return matrix;
    }

    private int[][] shiftRows(int[][] grid) {
        int[][] matrix = new int[4][4];
        for (int i = 0; i < 4; i++)
            matrix[i] = rightShift(grid[i], i);
        return matrix;
    }

    private int multiplyBy3(int v) {
        return multiplyBy2(v) ^ v;
    }

    private int multiplyBy2(int v) {
        int s = v << 1;
        s &= 0xff;
        if ((v & 128) != 0)
            s ^= 0x1b;
        return s;
    }

    private int[] mixColumn(int[] column) {
        int[] result = new int[4];

        for (int i = 0; i < 4; i++)
            result[i] = multiplyBy2(column[i]) ^
                    multiplyBy3(column[(i + 1) % 4]) ^
                    column[(i + 2) % 4] ^
                    column[(i + 3) % 4];

        return result;
    }

    private int[][] mixColumns(int[][] grid) {
        int[][] result = new int[4][4];
        for (int i = 0; i < 4; i++) {
            int[] col = new int[4];
            for (int j = 0; j < 4; j++) col[j] = grid[j][i];
            int[] newCol = mixColumn(col);
            for (int j = 0; j < 4; j++) result[j][i] = newCol[j];
        }
        return result;
    }

    private int[] rightShift(int[] arr, int sham) {
        int[] result = new int[4];
        for (int i = 0; i < 4; i++)
            result[(sham + i) % 4] = arr[i];
        return result;
    }

    private int[][] addRoundKey(int[][] grid, int[][] key) {
        int[][] matrix = new int[4][4];
        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                matrix[i][j] = 0xff & grid[i][j] ^ key[i][j];

        return matrix;
    }

    String decrypt() {
        int[][] grid = createGridFromString(this.cypher);
        int[][] keyGrid = createGridFromString(this.key);

        int[][] expandedKey = expandKey(keyGrid);

        /*for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 44; j++) {
                System.out.print(String.format("%02X\t", expandedKey[j][i]));
            }
            System.out.println();
        }*/

        int[][] roundKey = extractRoundKey(expandedKey, 10);
        printGrid(roundKey, 10, "roundKey");
        printGrid(grid, 10, "grid");
        grid = addRoundKey(grid, roundKey);
        printGrid(grid, 10, "addRoundKey");
        grid = shiftRows(grid);
        printGrid(grid, 10, "shiftRows");
        grid = reverseSubBytes(grid);
        printGrid(grid, 10, "reverseSubBytes");

        for (int i = 9; i > 0; i--) {
            roundKey = extractRoundKey(expandedKey, i);
            printGrid(roundKey, i, "roundKey");
            grid = addRoundKey(grid, roundKey);
            printGrid(grid, i, "addRoundKey");

            grid = mixColumns(grid);
            grid = mixColumns(grid);
            grid = mixColumns(grid);
            printGrid(grid, i, "mixColumns");

            grid = shiftRows(grid);
            printGrid(grid, i, "shiftRows");

            grid = reverseSubBytes(grid);
            printGrid(grid, i, "reverseSubBytes");
        }

        roundKey = extractRoundKey(expandedKey, 0);
        printGrid(roundKey, 0, "roundKey");
        grid = addRoundKey(grid, roundKey);
        printGrid(grid, 0, "addRoundKey");

        return createStringFromGrid(grid);
    }


    private int[][] createGridFromString(String text) {
        int[][] matrix = new int[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                int k = 2 * (4 * j + i);
                matrix[i][j] = (Character.digit(text.charAt(k), 16) << 4) + Character.digit(text.charAt(k + 1), 16);
            }
        }

        return matrix;
    }

    private String createStringFromGrid(int[][] grid) {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                builder.append(String.format("%02x", grid[j][i]));

        return builder.toString();
    }

    private void printGrid(int[][] g, int round, String step) {
        /*System.out.println(step + " " + round);
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                System.out.print(String.format("%02X\t", g[i][j]));
            }
            System.out.println();
        }*/
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String key = scanner.nextLine();
        String cypher = scanner.nextLine();

        AESDecoder decoder = new AESDecoder(cypher, key);
        String plain = decoder.decrypt();

        System.out.println(plain);
    }
}
